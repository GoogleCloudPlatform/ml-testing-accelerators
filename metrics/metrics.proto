/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

message TestCompletedEvent {
  enum TestStatus {
    COMPLETED = 0;
    FAILED = 1;
    TIMEOUT = 2;
    MISSED = 3;
  }

  string benchmark_id = 1;
  string output_path = 2;

  TestStatus status = 3;
  int32 num_attempts = 4;

  google.protobuf.Timestamp start_time = 5;
  google.protobuf.Duration duration = 6;
  DebugInfo debug_info = 7;
  MetricCollectionConfig metric_collection_config = 8;
  map<string, float> extras = 9;
  map<string, string> labels = 10;
}

message MetricCollectionConfig {
  repeated MetricSource sources = 1;

  // Use historical data from another test. E.g. compare release to historical average for nightly.
  string compare_to_benchmark_id = 2;

  bool silence_alerts = 3;
  bool record_failing_test_metrics = 4;
}

message DebugInfo {
  string logs_link = 1;
  string logs_download_command = 2;
  string details_link = 3;

  // e.g. save the JobSpec
  string resource_def = 4;
}

message MetricSource {
  oneof source_type {
    TensorBoardSource tensorboard = 1;
    LiteralSource literals = 2;
    PerfZeroSource perfzero = 3;
  }
}

message TensorBoardSource {
  enum AggregationStrategy {
    FINAL = 0;
    MIN = 1;
    MAX = 2;
    AVERAGE = 3;
    MEDIAN = 4;
  }
  message TagStrategy {
    string tag_pattern = 1;
    repeated AggregationStrategy strategies = 2;
  }
  message AggregateAssertion {
    string tag = 1;
    AggregationStrategy strategy = 2;
    Assertion assertion = 3;
  }
  bool merge_runs = 1;
  repeated TagStrategy include_tags = 2;
  repeated string exclude_tags = 3;

  repeated AggregateAssertion aggregate_assertions = 4;
}

message LiteralSource {
  map<string, Assertion> assertions = 1;
}

message PerfZeroSource {
  map<string, Assertion> assertions = 1;
}

message Assertion {
  enum Comparison {
    EQUAL = 0;
    LESS = 1;
    GREATER = 2;
    WITHIN = 3;
  }
  message FixedValue {
    Comparison comparison = 1;
    double value = 2;
  }
  message WithinBounds {
    double upper_bound = 1;
    double lower_bound = 2;
  }
  message StdDevsFromMean {
    Comparison comparison = 1;
    int32 std_devs = 2;
  }
  message PercentDifference {
    Comparison comparison = 1;
    double percent = 2;
    oneof target_type {
      double value = 3;
      bool use_historical_mean = 4;
    } 
  }
  oneof assertion_type {
    FixedValue fixed_value = 1;
    WithinBounds within_bounds = 2;
    StdDevsFromMean std_devs_from_mean = 3;
    PercentDifference percent_difference = 4;
  }
  bool inclusive_bounds = 5;
  bool fail_if_missing = 6;

  // Only relevant for types with historical data
  int32 wait_for_n_data_points = 7;
  google.protobuf.Duration time_window = 8;
  google.protobuf.Timestamp min_timestamp = 9;
}
