# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"apiVersion": "batch/v1"
"kind": "CronJob"
"metadata":
  "labels":
    "accelerator": "v2-8"
    "benchmarkId": "jax-compilation-cache-test-func-v2-8-1vm"
    "frameworkVersion": "jax"
    "mode": "func"
    "model": "compilation-cache-test"
  "name": "jax-compilation-cache-test-func-v2-8-1vm"
  "namespace": "automated"
"spec":
  "concurrencyPolicy": "Forbid"
  "jobTemplate":
    "metadata":
      "annotations":
        "ml-testing-accelerators/gcs-subdir": "jax/compilation-cache-test/func/v2-8"
        "ml-testing-accelerators/metric-config": |
          {
            "sources": [
              {
                "tensorboard": {
                  "aggregate_assertions": [
          
                  ],
                  "exclude_tags": [
                    "_hparams_/session_start_info"
                  ],
                  "include_tags": [
                    {
                      "strategies": [
                        "FINAL"
                      ],
                      "tag_pattern": "*"
                    }
                  ],
                  "merge_runs": true
                }
              }
            ]
          }
      "labels":
        "accelerator": "v2-8"
        "benchmarkId": "jax-compilation-cache-test-func-v2-8-1vm"
        "frameworkVersion": "jax"
        "mode": "func"
        "model": "compilation-cache-test"
    "spec":
      "activeDeadlineSeconds": 86400
      "backoffLimit": 0
      "template":
        "metadata":
          "annotations":
            "reserved.cloud-tpus.google.com": "false"
            "tf-version.cloud-tpus.google.com": "tpu-ubuntu2204-base"
        "spec":
          "activeDeadlineSeconds": 3600
          "containers":
          - "args":
            - "bash"
            - "-c"
            - |
              set -x
              set -u
              
              cat > testsetup.sh << 'TEST_SCRIPT_EOF'
              set -x
              set -u
              set -e
              
              # .bash_logout sometimes causes a spurious bad exit code, remove it.
              rm .bash_logout
              
              pip install --upgrade pip
              
              echo "Checking out and installing JAX..."
              git clone https://github.com/google/jax.git
              cd jax
              echo "jax git hash: $(git rev-parse HEAD)"
              pip install -r build/test-requirements.txt
              
              pip install .[tpu] \
                -f https://storage.googleapis.com/jax-releases/libtpu_releases.html
              
              
              python3 -c 'import jax; print("jax version:", jax.__version__)'
              python3 -c 'import jaxlib; print("jaxlib version:", jaxlib.__version__)'
              python3 -c 'import jax; print("libtpu version:",
                jax.lib.xla_bridge.get_backend().platform_version)'
              
              
              num_devices=`python3 -c "import jax; print(jax.device_count())"`
              if [ "$num_devices" = "1" ]; then
                echo "No TPU devices detected"
                exit 1
              fi
              
              cd ~
              
              mkdir "/tmp/compilation_cache_integration_test"
              cat >integration.py <<'END_SCRIPT'
              import jax
              from jax.experimental.compilation_cache import compilation_cache as cc
              from jax import pmap, lax
              from jax._src.config import config
              import numpy as np
              
              config.update('jax_persistent_cache_min_compile_time_secs', 0)
              cc.initialize_cache("/tmp/compilation_cache_integration_test")
              f = pmap(lambda x: x - lax.psum(x, 'i'), axis_name='i')
              print(f(np.arange(8)))
              END_SCRIPT
              
              cat >directory_size.py <<'END_SCRIPT'
              import os
              num_of_files = sum(1 for f in os.listdir("/tmp/compilation_cache_integration_test"))
              assert num_of_files == 1, f"The number of files in the cache should be 1 but is {num_of_files}"
              END_SCRIPT
              
              python3 integration.py
              python3 directory_size.py
              python3 integration.py
              python3 directory_size.py
              
              
              TEST_SCRIPT_EOF
              
              gcloud alpha compute tpus tpu-vm ssh xl-ml-test@$(cat /scripts/tpu_name) \
              --zone=$(cat /scripts/zone) \
              --ssh-key-file=/scripts/id_rsa \
              --strict-host-key-checking=no \
              --internal-ip \
              --worker=all \
              --command "$(cat testsetup.sh)"
              
              exit_code=$?
              bash /scripts/cleanup.sh
              exit $exit_code
            "env":
            - "name": "POD_NAME"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.name"
            - "name": "POD_UID"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.uid"
            - "name": "POD_NAMESPACE"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.namespace"
            - "name": "JOB_NAME"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.labels['job-name']"
            - "name": "MODEL_DIR"
              "value": "$(OUTPUT_BUCKET)/jax/compilation-cache-test/func/v2-8/$(JOB_NAME)"
            - "name": "KUBE_GOOGLE_CLOUD_TPU_ENDPOINTS"
              "value": "local"
            - "name": "LOCAL_OUTPUT_DIR"
              "value": "/tmp/model_dir"
            "envFrom":
            - "configMapRef":
                "name": "gcs-buckets"
            "image": "google/cloud-sdk"
            "imagePullPolicy": "Always"
            "lifecycle":
              "preStop":
                "exec":
                  "command":
                  - "bash"
                  - "/scripts/cleanup.sh"
            "name": "train"
            "resources":
              "limits":
                "tpu.googleapis.com/v2": 8
              "requests":
                "cpu": 1
                "memory": "2Gi"
            "volumeMounts":
            - "mountPath": "/scripts"
              "name": "scripts"
              "readOnly": false
          "initContainers":
          - "command":
            - "/bin/bash"
            - "-c"
            - |
              set -u
              set -e
              set -x
              
              project=$(curl -sS "http://metadata.google.internal/computeMetadata/v1/project/project-id" -H "Metadata-Flavor: Google")
              zone=$(curl -sS "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" | awk -F'/' '{print $4}')
              tpu_name=tpu-${POD_UID}
              ssh-keygen -t rsa -f /scripts/id_rsa -q -N ""
              
              echo "
              gcloud alpha compute tpus tpu-vm delete -q --async ${tpu_name} --zone=${zone}
              sleep 60
              " > /scripts/cleanup.sh
              
              echo "xl-ml-test:$(cat /scripts/id_rsa.pub)" > ssh-keys.txt
              echo 'echo Running startup script' > startup-script.txt
              
              # Retry every 30 seconds for up to 10 minutes
              start_time="$(date -u +%s)"
              for i in {1..40}; do
                set +e
                gcloud alpha compute tpus tpu-vm create ${tpu_name} \
                  --accelerator-type='v2-8' \
                  --version='tpu-ubuntu2204-base'  \
                  --metadata-from-file='ssh-keys=ssh-keys.txt,startup-script=startup-script.txt' \
                  --labels='test-name=jax-compilation-cache-test-func-v2-8-1vm' \
                  --zone=${zone}
              
                exit_code=$?
                set -e
              
                current_time="$(date -u +%s)"
                elapsed_seconds=$(($current_time-$start_time))
                # Break if command passed or 10-minute limit reached
                test $exit_code = 0 && break
                test $elapsed_seconds -gt 600 && break
                sleep 30
              done
              
              if [ $exit_code -ne 0 ]; then
                exit $exit_code
              fi
              
              echo ${zone} > /scripts/zone
              echo ${tpu_name} > /scripts/tpu_name
              gcloud compute tpus describe ${tpu_name} --project=${project} --zone=${zone} --format="value(networkEndpoints[0].ipAddress)" > /scripts/tpu_ip
              gcloud compute tpus describe ${tpu_name} --project=${project} --zone=${zone} --flatten="networkEndpoints[]" --format="csv[no-heading](networkEndpoints.ipAddress)" > /scripts/all_tpu_ips
              
              sleep 60
              
            "env":
            - "name": "POD_UID"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.uid"
            "image": "google/cloud-sdk"
            "name": "create-tpu"
            "volumeMounts":
            - "mountPath": "/scripts"
              "name": "scripts"
          "nodeSelector":
            "tpu-available": "true"
          "priorityClassName": "tpu-device"
          "restartPolicy": "Never"
          "volumes":
          - "emptyDir":
              "medium": "Memory"
            "name": "scripts"
  "schedule": "0 0 31 2 *"
  "successfulJobsHistoryLimit": 1