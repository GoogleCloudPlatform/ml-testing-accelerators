# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"apiVersion": "batch/v1beta1"
"kind": "CronJob"
"metadata":
  "labels":
    "accelerator": "v3-8"
    "benchmarkId": "pt-20220314-fs-transformer-conv-v3-8-1vm"
    "frameworkVersion": "pt-20220314"
    "mode": "conv"
    "model": "fs-transformer"
  "name": "pt-20220314-fs-transformer-conv-v3-8-1vm"
  "namespace": "automated"
"spec":
  "concurrencyPolicy": "Forbid"
  "jobTemplate":
    "metadata":
      "annotations":
        "ml-testing-accelerators/gcs-subdir": "pt-20220314/fs-transformer/conv/v3-8"
        "ml-testing-accelerators/metric-config": |
          {
            "sources": [
              {
                "literals": {
                  "assertions": {
                    "duration": {
                      "inclusive_bounds": false,
                      "std_devs_from_mean": {
                        "comparison": "LESS",
                        "std_devs": 5
                      },
                      "wait_for_n_data_points": 10
                    }
                  }
                }
              },
              {
                "tensorboard": {
                  "aggregate_assertions": [
          
                  ],
                  "exclude_tags": [
                    "LearningRate"
                  ],
                  "include_tags": [
                    {
                      "strategies": [
                        "FINAL"
                      ],
                      "tag_pattern": "*"
                    }
                  ],
                  "merge_runs": true
                }
              }
            ]
          }
      "labels":
        "accelerator": "v3-8"
        "benchmarkId": "pt-20220314-fs-transformer-conv-v3-8-1vm"
        "frameworkVersion": "pt-20220314"
        "mode": "conv"
        "model": "fs-transformer"
    "spec":
      "activeDeadlineSeconds": 90000
      "backoffLimit": 0
      "template":
        "metadata":
          "annotations":
            "reserved.cloud-tpus.google.com": "false"
            "tf-version.cloud-tpus.google.com": "nightly20220314"
        "spec":
          "containers":
          - "args": null
            "command":
            - "bash"
            - "-c"
            - |
              set -x
              set -u
              
              cat > workersetup.sh << TEST_SCRIPT_EOF
              sudo apt-get -y update
              sudo apt-get -y install nfs-common
              sudo mkdir /datasets && sudo mount $(PYTORCH_DATA_LOCATION) /datasets
              
              yes '' | gcloud compute config-ssh
              
              cd
              sudo pip3 uninstall --yes torch torch_xla torchvision numpy
              sudo pip3 install https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch-1.11-cp38-cp38-linux_x86_64.whl https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torch_xla-1.11-cp38-cp38-linux_x86_64.whl https://storage.googleapis.com/tpu-pytorch/wheels/tpuvm/torchvision-1.11-cp38-cp38-linux_x86_64.whl numpy
              sudo pip3 install mkl mkl-include
              sudo apt-get -y update
              sudo apt-get install -y libomp5
              git clone https://github.com/pytorch/pytorch.git
              cd pytorch
              git clone https://github.com/pytorch/xla.git
              
              
              cd
              git clone --recursive https://github.com/pytorch-tpu/examples.git tpu-examples/
              echo 'export PATH=~/.local/bin:$PATH' >> ~/.bash_profile
              echo 'export XLA_USE_BF16=1' >> ~/.bash_profile
              
              TEST_SCRIPT_EOF
              gcloud alpha compute tpus tpu-vm ssh xl-ml-test@$(cat /scripts/tpu_name) --zone=$(cat /scripts/zone) --ssh-key-file=/scripts/id_rsa --strict-host-key-checking=no --internal-ip --worker=all --command "$(cat workersetup.sh)"
              
              cat > testscript.sh << 'TEST_SCRIPT_EOF'
              export XRT_TPU_CONFIG='localservice;0;localhost:51011'
              '/bin/bash' \
              '-c' \
              'set -u
              set -e
              set -x
              
              pip install --editable tpu-examples/deps/fairseq
              '"'"'python3'"'"' \
              '"'"'tpu-examples/deps/fairseq/train.py'"'"' \
              '"'"'/datasets/wmt18_en_de_bpej32k'"'"' \
              '"'"'--metrics_debug'"'"' \
              '"'"'--arch=transformer_vaswani_wmt_en_de_big'"'"' \
              '"'"'--max-target-positions=64'"'"' \
              '"'"'--attention-dropout=0.1'"'"' \
              '"'"'--no-progress-bar'"'"' \
              '"'"'--criterion=label_smoothed_cross_entropy'"'"' \
              '"'"'--source-lang=en'"'"' \
              '"'"'--lr-scheduler=inverse_sqrt'"'"' \
              '"'"'--min-lr=1e-09'"'"' \
              '"'"'--skip-invalid-size-inputs-valid-test'"'"' \
              '"'"'--target-lang=de'"'"' \
              '"'"'--label-smoothing=0.1'"'"' \
              '"'"'--update-freq=1'"'"' \
              '"'"'--optimizer=adam'"'"' \
              '"'"'--adam-betas'"'"' \
              '"'"'(0.9,0.98)'"'"' \
              '"'"'--warmup-init-lr=1e-07'"'"' \
              '"'"'--lr=0.0005'"'"' \
              '"'"'--warmup-updates=4000'"'"' \
              '"'"'--share-all-embeddings'"'"' \
              '"'"'--dropout=0.3'"'"' \
              '"'"'--weight-decay=0.0'"'"' \
              '"'"'--num_cores=8'"'"' \
              '"'"'--log_steps=200'"'"' \
              '"'"'--train-subset=train'"'"' \
              '"'"'--valid-subset=valid'"'"' \
              '"'"'--input_shapes'"'"' \
              '"'"'256x64'"'"' \
              '"'"'512x32'"'"' \
              '"'"'--save-interval=5'"'"' \
              '"'"'--save-dir=/tmp/checkpoints'"'"' \
              '"'"'--max-epoch=25'"'"' 2>&1 | tee training_logs.txt
              bleu=`fairseq-generate \
                /datasets/wmt18_en_de_bpej32k \
                --remove-bpe --quiet --lenpen 0.6 --beam 4 \
                --path /tmp/checkpoints/checkpoint25.pt \
                --skip-invalid-size-inputs-valid-test | grep BLEU \
                | grep -v loadi | tail -1 | cut -d '"'"'='"'"' -f 3| cut -d'"'"'.'"'"' -f 1`
              echo '"'"'BLEU score is'"'"' $bleu
              wps=$(cat training_logs.txt | grep '"'"'| wps '"'"' | tail -1 | grep -o -E '"'"' wps [0-9]+'"'"' | sed '"'"'s/[^0-9]*//g'"'"')
              echo '"'"'final words per second (wps) is'"'"' $wps
              test $bleu -gt 27 -a $wps -gt 10000
              
              '
              TEST_SCRIPT_EOF
              gcloud alpha compute tpus tpu-vm ssh xl-ml-test@$(cat /scripts/tpu_name) --zone=$(cat /scripts/zone) --ssh-key-file=/scripts/id_rsa --strict-host-key-checking=no --internal-ip --worker=0 --command "$(cat testscript.sh)"
              
              exit_code=$?
              bash /scripts/cleanup.sh
              exit $exit_code
            "env":
            - "name": "POD_NAME"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.name"
            - "name": "POD_UID"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.uid"
            - "name": "POD_NAMESPACE"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.namespace"
            - "name": "JOB_NAME"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.labels['job-name']"
            - "name": "MODEL_DIR"
              "value": "$(OUTPUT_BUCKET)/pt-20220314/fs-transformer/conv/v3-8/$(JOB_NAME)"
            - "name": "KUBE_GOOGLE_CLOUD_TPU_ENDPOINTS"
              "value": "local"
            - "name": "LOCAL_OUTPUT_DIR"
              "value": "/tmp/model_dir"
            - "name": "XLA_USE_BF16"
              "value": "1"
            "envFrom":
            - "configMapRef":
                "name": "gcs-buckets"
            - "configMapRef":
                "name": "pytorch-nfs-ip"
            "image": "google/cloud-sdk"
            "imagePullPolicy": "Always"
            "lifecycle":
              "preStop":
                "exec":
                  "command":
                  - "bash"
                  - "/scripts/cleanup.sh"
            "name": "train"
            "resources":
              "limits":
                "tpu.googleapis.com/v3": 8
              "requests":
                "cpu": 1
                "memory": "2Gi"
            "volumeMounts":
            - "mountPath": "/scripts"
              "name": "scripts"
              "readOnly": false
            - "mountPath": "/dev/shm"
              "name": "dshm"
              "readOnly": false
          "initContainers":
          - "command":
            - "/bin/bash"
            - "-c"
            - |
              set -u
              set -e
              set -x
              
              project=$(curl -sS "http://metadata.google.internal/computeMetadata/v1/project/project-id" -H "Metadata-Flavor: Google")
              zone=$(curl -sS "http://metadata.google.internal/computeMetadata/v1/instance/zone" -H "Metadata-Flavor: Google" | awk -F'/' '{print $4}')
              tpu_name=tpu-${POD_UID}
              ssh-keygen -t rsa -f /scripts/id_rsa -q -N ""
              
              echo "
              gcloud alpha compute tpus tpu-vm delete -q ${tpu_name} --zone=${zone}
              " > /scripts/cleanup.sh
              
              echo "xl-ml-test:$(cat /scripts/id_rsa.pub)" > ssh-keys.txt
              echo 'echo Running startup script' > startup-script.txt
              
              # Retry every 30 seconds for 10 minutes
              for i in {1..20}; do
                set +e
                gcloud alpha compute tpus tpu-vm create ${tpu_name} \
                  --accelerator-type='v3-8' \
                  --version='nightly20220314'  \
                  --metadata-from-file='ssh-keys=ssh-keys.txt,startup-script=startup-script.txt' \
                  --labels='test-name=pt-20220314-fs-transformer-conv-v3-8-1vm' \
                  --zone=${zone}
              
                exit_code=$?
                set -e
                test $exit_code = 0 && break || sleep 30;
              done
              
              if [ $exit_code -ne 0 ]; then
                exit $exit_code
              fi
              
              echo ${zone} > /scripts/zone
              echo ${tpu_name} > /scripts/tpu_name
              gcloud compute tpus describe ${tpu_name} --project=${project} --zone=${zone} --format="value(networkEndpoints[0].ipAddress)" > /scripts/tpu_ip
              gcloud compute tpus describe ${tpu_name} --project=${project} --zone=${zone} --flatten="networkEndpoints[]" --format="csv[no-heading](networkEndpoints.ipAddress)" > /scripts/all_tpu_ips
              
              sleep 60
              
            "env":
            - "name": "POD_UID"
              "valueFrom":
                "fieldRef":
                  "fieldPath": "metadata.uid"
            "image": "google/cloud-sdk"
            "name": "create-tpu"
            "volumeMounts":
            - "mountPath": "/scripts"
              "name": "scripts"
          "nodeSelector":
            "tpu-available": "true"
          "priorityClassName": "tpu-device"
          "restartPolicy": "Never"
          "volumes":
          - "emptyDir":
              "medium": "Memory"
            "name": "scripts"
          - "emptyDir":
              "medium": "Memory"
            "name": "dshm"
  "schedule": "0 6 * * 0,5"
  "successfulJobsHistoryLimit": 1